trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  artifactName: 'MyAppArtifact'
  devPort: '5000' # Chosen port number for the development environment

stages:
- stage: Deliver
  displayName: 'Deliver Stage'
  jobs:
  - job: DeliverJob
    displayName: 'Build and Package'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        configuration: $(buildConfiguration)

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
        publishWebProjects: false
        workingDirectory: ''

    - task: DotNetCoreCLI@2
      displayName: 'Publish Project'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'

- stage: Deploy_to_Dev
  displayName: 'Deploy to Dev Environment'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Deploy to Dev'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: '$(artifactName)'

    - task: AzureWebApp@1
      displayName: 'Deploy to Dev App Service'
      inputs:
        azureSubscription: '<Your Azure Subscription>'
        appType: 'webApp'
        appName: '<Your Dev App Service Name>'
        packageForLinux: '$(Pipeline.Workspace)/$(artifactName)/**/*'
        startupCommand: 'dotnet <YourAppName>.dll --urls http://*:$(devPort)'